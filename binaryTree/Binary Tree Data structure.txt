Binary Tree Data structure

A tree is a hierarchical data structures.
Topmost node is called root.

A tree whose elements have at most 3 children is called a binary tree. Since each elementin a binary tree can have only 2 children, we typically name them the left and right child.

A binary tree node contains following parts
1. data
2. pointer to left child
3. pointer to right child

Main applications of trees include:
1. manipulate hierarchical data.
2. make information easy to search
3. Manipulate sorted list of data.
4. As a workflow for compositing digital images for visual effects.
5. Router algorithms


 Individual node class
class Node:
	def __init__(self,key):
	self.left = None
	self.right = None
	self.val = key

Binary tree properties:

1) Maximum number of nodes at lever 'l' of binary tree is 2^l
2) Maximum number of nodes in a binary tree of height 'h' is 2^h - 1

3) In a binary tree with N nodes, minimum possible height or the minimum number of levels is? Log2(N+1)

4) A Binary tree with L leaves has at least |Log2L| + 1 levels

5) In binary tree where every nodes has 0 or 2 children, the number of leaf nodes is always one more than nodes with two children.


Tree Traversals (Inorder, Preorder, and Postorder)
Depth First Traversals:
1. Inorder (left, root, right) 
2. preoder (Root , left, right)
3. Postorder (left, right, root)

Breadth first or Level order Traversal
